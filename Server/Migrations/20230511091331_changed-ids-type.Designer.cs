// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20230511091331_changed-ids-type")]
    partial class changedidstype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedLibrary.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("SharedLibrary.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromPlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeroMapViewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToPlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HeroMapViewId");

                    b.HasIndex("SessionMapId");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("SharedLibrary.Models.Hero", b =>
                {
                    b.Property<Guid>("HeroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Argb")
                        .HasColumnType("int");

                    b.Property<byte>("ColonizationShipLimit")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("HeroMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ResearchShipLimit")
                        .HasColumnType("tinyint");

                    b.Property<int>("Resourses")
                        .HasColumnType("int");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HeroId");

                    b.HasIndex("HeroMapId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("SharedLibrary.Models.HeroMapView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HeroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomePlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.HasIndex("HomePlanetId");

                    b.ToTable("HeroMaps");
                });

            modelBuilder.Entity("SharedLibrary.Models.Lobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LobbyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("MaxHeroNumbers")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("SharedLibrary.Models.LobbyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Argb")
                        .HasColumnType("int");

                    b.Property<Guid>("LobbyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LobbyLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("Ready")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.HasIndex("UserId");

                    b.ToTable("LobbyInfos");
                });

            modelBuilder.Entity("SharedLibrary.Models.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeroMapViewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionMapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HeroMapViewId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SessionMapId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("SharedLibrary.Models.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("SharedLibrary.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveHeroId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionMapId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SharedLibrary.Models.SessionMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SessionMaps");
                });

            modelBuilder.Entity("SharedLibrary.Models.Edge", b =>
                {
                    b.HasOne("SharedLibrary.Models.HeroMapView", null)
                        .WithMany("Connections")
                        .HasForeignKey("HeroMapViewId");

                    b.HasOne("SharedLibrary.Models.SessionMap", null)
                        .WithMany("Connections")
                        .HasForeignKey("SessionMapId");
                });

            modelBuilder.Entity("SharedLibrary.Models.Hero", b =>
                {
                    b.HasOne("SharedLibrary.Models.HeroMapView", "HeroMap")
                        .WithMany()
                        .HasForeignKey("HeroMapId");

                    b.HasOne("SharedLibrary.Models.Session", "Session")
                        .WithMany("Heroes")
                        .HasForeignKey("SessionId");

                    b.HasOne("SharedLibrary.Models.ApplicationUser", "User")
                        .WithMany("Heroes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroMap");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedLibrary.Models.HeroMapView", b =>
                {
                    b.HasOne("SharedLibrary.Models.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLibrary.Models.Planet", "HomePlanet")
                        .WithMany()
                        .HasForeignKey("HomePlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");

                    b.Navigation("HomePlanet");
                });

            modelBuilder.Entity("SharedLibrary.Models.LobbyInfo", b =>
                {
                    b.HasOne("SharedLibrary.Models.Lobby", "Lobby")
                        .WithMany("LobbyInfos")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLibrary.Models.ApplicationUser", "User")
                        .WithMany("LobbyInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedLibrary.Models.Planet", b =>
                {
                    b.HasOne("SharedLibrary.Models.HeroMapView", null)
                        .WithMany("Planets")
                        .HasForeignKey("HeroMapViewId");

                    b.HasOne("SharedLibrary.Models.Point", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLibrary.Models.SessionMap", null)
                        .WithMany("Planets")
                        .HasForeignKey("SessionMapId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SharedLibrary.Models.Session", b =>
                {
                    b.HasOne("SharedLibrary.Models.SessionMap", "SessionMap")
                        .WithOne("Session")
                        .HasForeignKey("SharedLibrary.Models.Session", "SessionMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionMap");
                });

            modelBuilder.Entity("SharedLibrary.Models.ApplicationUser", b =>
                {
                    b.Navigation("Heroes");

                    b.Navigation("LobbyInfos");
                });

            modelBuilder.Entity("SharedLibrary.Models.HeroMapView", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Planets");
                });

            modelBuilder.Entity("SharedLibrary.Models.Lobby", b =>
                {
                    b.Navigation("LobbyInfos");
                });

            modelBuilder.Entity("SharedLibrary.Models.Session", b =>
                {
                    b.Navigation("Heroes");
                });

            modelBuilder.Entity("SharedLibrary.Models.SessionMap", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Planets");

                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
